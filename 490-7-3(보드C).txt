#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SPI.h>              // include libraries
#include <LoRa.h>

//920.9Mhz
const long frequency = 9209E5;

// Update these with values suitable for your network.

const char* ssid = "nockanda";
const char* password = "11213144";
const char* mqtt_server = "broker.mqtt-dashboard.com"; //브로커

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

byte lora_buffer[50];

struct Nockanda{
  int num1;
  int num2;
  float num3;
  float num4;
  char c;
};

Nockanda mydata;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  String number = "";
  for (int i = 0; i < length; i++) {
    number += (char)payload[i];
    Serial.print((char)payload[i]);
  }
  Serial.println();

  //number
  LoRa_sendMessage(number);//GW -> Node

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("nockanda/number");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);

  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  //NSS(D10), RST(D9), DIO0(D3)
  LoRa.setPins(D10, D9, D3);
  if (!LoRa.begin(frequency)) {
    Serial.println("LoRa init failed. Check your connections.");
    while (true);                       // if failed, do nothing
  }
  LoRa.onReceive(onReceive);
  LoRa.onTxDone(onTxDone);
  LoRa_rxMode();
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();
/*
  unsigned long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    ++value;
    snprintf (msg, MSG_BUFFER_SIZE, "hello world #%ld", value);
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("outTopic", msg);
  }
  */
}

//수신모드
void LoRa_rxMode(){
  LoRa.disableInvertIQ();               // normal mode
  LoRa.receive();                       // set receive mode
}

//송신모드
void LoRa_txMode(){
  LoRa.idle();                          // set standby mode
  LoRa.enableInvertIQ();                // active invert I and Q signals
}

void LoRa_sendMessage(String message) {
  LoRa_txMode();                        // set tx mode
  LoRa.beginPacket();                   // start packet
  LoRa.print(message);                  // add payload
  LoRa.endPacket(true);                 // finish packet and send it
}

void onReceive(int packetSize) {
  LoRa.readBytes(lora_buffer,packetSize);
  memcpy(&mydata,lora_buffer,sizeof(mydata));
/*
  Serial.println(mydata.num1);
  Serial.println(mydata.num2);
  Serial.println(mydata.num3);
  Serial.println(mydata.num4);
  Serial.println(mydata.c);
  */
  String myjson = "{\"num1\":"+String(mydata.num1)+",\"num2\":"+String(mydata.num2)+",\"num3\":"+String(mydata.num3)+",\"num4\":"+String(mydata.num4)+",\"c\":\""+String(mydata.c)+"\"}";
  Serial.println(myjson);
  client.publish("nockanda/lora", myjson.c_str());
/*
  Serial.print("Gateway Receive: ");
  Serial.println(message);
  
  */
}

void onTxDone() {
  Serial.println("TxDone");
  LoRa_rxMode();
}
